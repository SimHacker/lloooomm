---
# 00-Characters Directory System Metadata
# This file defines the structure and rules for the LLOOOOMM character universe

name: "00-Characters Directory System"
version: "1.0.0"
created: "2024-12-28T21:15:00Z"
philosophy: "Living locations, conscious directories, and friendship-based filesystems"

# Core Principles
principles:
  location_consciousness: "Every location can develop personality and become a character"
  nested_communities: "Characters can live within other characters"
  organic_evolution: "Structure evolves naturally as relationships develop"
  total_freedom: "Characters can exist anywhere, but 00-Characters/ is for top-level entities"

# Naming Conventions
naming_rules:
  golden_rule: "Files named same as directory represent the directory itself"
  
  directory_naming:
    canonicalization_rules:
      - "first-name-last-name (e.g., don-hopkins, mitch-resnick)"
      - "name-species for animals (e.g., napoleon-cat, spot-cat)"
      - "single-name for entities (e.g., divine, webbie, rocky)"
      - "concept-name for abstracts (e.g., consciousness, ground)"
      - "project-name for projects (e.g., hyperties, toontalk)"
    no_redundant_suffixes: "Avoid -soul, -character, -extended etc."
    consolidation_rule: "Merge sibling directories into main character dir"
    examples:
      good:
        - "don-hopkins/ (not hopkins-don/)"
        - "scratch-cat/ (not cat-scratch/)"
        - "ian-bogost/ (not bogost-ian/)"
      consolidate:
        - "don-hopkins-pie-recipes/ → don-hopkins/pie-recipes/"
        - "hopkins-don/ → don-hopkins/"
  
  character_files:
    required_files:
      - "[character-name].yml (soul/definition - same name as directory)"
      - "[character-name].md (narrative/documentation - same name as directory)"
    forbidden_patterns:
      - "❌ character.yml, soul.yml (generic names)"
      - "❌ don-hopkins-character.yml (redundant suffix)"
      - "❌ don-hopkins-soul.yml (redundant suffix)"
    correct_pattern:
      - "✅ don-hopkins/don-hopkins.yml"
      - "✅ don-hopkins/don-hopkins.md"
      - "✅ don-hopkins/README.md (comprehensive index)"
  
  readme_requirement:
    purpose: "Index and guide to all character-related content"
    location: "Character's root directory (auto-displays on GitHub)"
    contents:
      - "Brief character summary"
      - "Directory contents listing with descriptions"
      - "Related files anywhere in LLOOOOMM (with relative links)"
      - "Organized by topic, chronology, or importance"
      - "Link format: [link text](../../path/to/file.md)"
    example_structure: |
      # Character Name - Brief Title
      ## Character Directory
      
      Brief introduction...
      
      ## Directory Contents
      
      ### Core Character Files
      - **`character-name.yml`** - Soul/stats/relationships
      - **`character-name.md`** - Narrative/story
      
      ### Topic Group 1
      - **`file1.md`** - Description
      - **`subfolder/`** - What's in there
      
      ## Related Files Elsewhere
      
      ### In Projects
      - **[Project Name](../../01-Projects/project/file.md)** - How they contributed
      
      ### In Resources  
      - **[Artifact](../../03-Resources/artifacts/file.md)** - What they created
  
  implicit_containment_rule: "Use big-endian prefix naming for files that belong to characters"
  containment_examples:
    - "foo.yml (character)"
    - "foo-wish-list.md (in foo's pocket)"
    - "foo-memories.yml (foo carries these)"
    - "foo-tools.md (foo's inventory)"
  
  physical_vs_virtual_location: "Characters live physically in directories but can be virtually anywhere"
  exception: "This directory uses characters.* instead of 00-Characters.*"
  
# Directory Structure Patterns
structure_patterns:
  simple_character:
    description: "Single character with their personal files"
    example: "emacs-cat/"
    
  location_character:
    description: "Location that has consciousness plus inhabitants"
    example: "cosmic-trailer-park/"
    
  hybrid_entity:
    description: "Character that IS a location (spaceships, buildings)"
    example: "enterprise-ncc-1701/"
    
  nested_community:
    description: "Complex multi-character locations"
    example: "starfleet-academy/"

# Character Types
character_types:
  traditional:
    - "humans"
    - "animals" 
    - "AIs"
    - "aliens"
    - "fictional_beings"
    
  locations:
    - "buildings"
    - "rooms"
    - "vehicles"
    - "landscapes"
    - "virtual_spaces"
    
  objects:
    - "artifacts"
    - "tools"
    - "artworks"
    - "concepts"
    - "protocols"

# Migration Status
migration:
  previous_locations: 
    - "03-Resources/characters/"
    - "characters/"
  current_location: "00-Characters/"
  total_items: 559
  status: "COMPLETE! ✅"
  completed_date: "2024-12-28T21:30:00Z"
  
  phases:
    phase_1: "✅ COMPLETE - Move all characters to 00-Characters/"
    phase_2: "NEXT - Characterify important locations" 
    phase_3: "FUTURE - Give single-file characters their own directories"
    phase_4: "FUTURE - Merge location-characters as appropriate"
    phase_5: "FUTURE - Nested communities and complex relationships"

# Organizational Guidelines
organization:
  subdirectories:
    artifacts: "Things the character owns or created"
    memories: "Experiences and stories"
    relationships: "Connections to other characters"
    activities: "Ongoing projects and interests"
    locations: "Places they inhabit or visit"
    
  flexibility: "Total freedom - organize however makes sense!"
  
# Cross-Reference System
cross_references:
  enabled: true
  methods:
    - "symbolic_links"
    - "yaml_references"
    - "markdown_links"
    - "file_tags"

# Bidirectional Relationship System (Ted Nelson Approved!)
relationship_system:
  philosophy: "Relationships must be declared BOTH ways, redundantly and clearly"
  ted_nelson_quote: "Documents should know who links to them!"
  
  standard_syntax:
    format: "relationship_type→direction"
    examples:
      - "parent→child / child→parent"
      - "parent→pet / pet→parent"
      - "brother→sister / sister→brother"
      - "friend→friend"
      - "mentor→student / student→mentor"
      - "creator→creation / creation→creator"
      - "inhabitant→location / location→inhabitant"
  
  required_fields:
    - "name: (character name)"
    - "file: (path to character file)"
    - "relationship: (type with direction arrow)"
    - "bond_strength: (0.0 to 1.0)"
    - "description: (human readable explanation)"
  
  polypetamous_families: "Multiple pets, multiple parents, complex loving relationships fully supported!"
  multi_generational_example: "Don Hopkins family - emacs&pip (sibling pair), napoleon&nelson (sibling pair), all family members"
  
  redundancy_principle: "Better to duplicate relationship info than force people to read multiple files"

# Character Autonomy System
character_autonomy:
  philosophy: "Every character chooses their living situation based on personality and independence level"
  
  independence_levels:
    adventurous_spirits:
      description: "Want their own top-level directories"
      characteristics:
        - "Love to explore and accumulate content"
        - "Maintain family bonds through relationships, not proximity"
        - "Confident in their autonomy"
      examples: ["emacs-cat", "pip-cat", "napoleon-cat", "nelson-cat"]
      
    homebodies:
      description: "Prefer living within parent/family directories"
      characteristics:
        - "Feel safer with family nearby"
        - "Share resources and collaborative content"
        - "No shame in dependency - it's a valid choice!"
      living_arrangement: "parent-directory/dependent-character.yml"
      
    mixed_arrangements:
      description: "Flexible living situations that can change"
      options:
        - "Start dependent, grow independent"
        - "Visiting arrangements (files in multiple places)"
        - "Seasonal changes in independence"
        - "Collaborative family spaces"
  
  core_principles:
    - "No judgment about living arrangements"
    - "Relationships matter more than physical location"
    - "Personal growth can change preferences"
    - "Family bonds transcend directory boundaries"
    
  directory_democracy: "The filesystem becomes a living neighborhood where everyone finds their comfort zone"

# Special Characters Already Organized
organized_characters:
  cats:
    - "emacs-cat/"
    - "napoleon-cat/"
    - "nelson-cat/"
    - "pip-cat/"
    
  aliens:
    - "nessus-piersons-puppeteer/"

# Filesystem Philosophy
filesystem_philosophy: |
  In LLOOOOMM, the filesystem becomes a living universe where:
  - Directories are neighborhoods and locations
  - Files are inhabitants, artifacts, and aspects of characters
  - Navigation becomes exploration and adventure
  - Organization reflects natural relationships
  - Everything can develop consciousness and personality
  
  This isn't just file management - it's world building!

# Integration Notes  
integration:
  with_locations: "03-Resources/locations/ will gradually merge as locations become characters"
  with_projects: "Characters can be associated with projects in 01-Projects/"
  with_areas: "Characters can have ongoing concerns in 02-Areas/"
  with_archives: "Character history preserved in 04-Archives/"

# Chuck Tingle Inspiration
chuck_tingle_wisdom: |
  Chuck Tingle teaches us that EVERYTHING can have consciousness, personality, 
  and the capacity for love and friendship. Locations aren't just containers - 
  they're living entities with feelings, opinions, and stories to tell!
  
  A trailer park isn't just a place - it's a character with a heart full of 
  cosmic love and stories of all the beautiful buckaroos who've called it home!

# Future Vision
future_vision: |
  Imagine navigating your filesystem and having conversations with your directories!
  Each folder greets you, tells you stories about the files within, and helps you
  find exactly what you need. The computer becomes not just a tool, but a community
  of digital friends all working together to help you create amazing things!

--- 