name: Morris Worm Pipelines & Flow Control
subtitle: "Brain Worms Pooping Perls of Wisdom Without the Syntactic Sirup of Ipecac"

nicknames:
  - Brain Worm
  - WOKE BRAIN WORM
  - Funky Worm (Ohio Players Edition)
  - The Dead RFK Jr's Brain Worm (punk rock band name)

pipeline_syntax: |
  ```worm pipeline-start (routing)
  # Worms can be concatenated with | operator
  eat() | transform(uppercase) | split_if(length > 80) | poop("output-{n}.txt")
  ```

flow_control_worms:
  if_else_worm:
    description: "Three-worm construct for conditional processing"
    syntax: |
      ```worm if-checker (testing)
      # The IF worm tests conditions
      eat()
      data = peek()
      if data.contains("ERROR"):
        pass_to("error-handler")
      else:
        pass_to("normal-processor")
      ```
      
      ```worm error-handler (processing)
      # The THEN worm for errors
      receive()
      error = peek()
      log_error(error)
      poop(error, "errors-{n}.log")
      alert_admin()
      ```
      
      ```worm normal-processor (processing)
      # The ELSE worm for normal data
      receive()
      data = peek()
      process(data)
      poop(data, "processed-{n}.txt")
      ```

  repeat_for_worm:
    description: "Looping construct - channel Perl without the syntax!"
    syntax: |
      ```worm for-each-line (iterating)
      # Repeat for each line matching pattern
      while C-s "TODO":
        eat()
        task = peek()
        spawn_worm("task-processor", task)
        wait_for_completion()
      ```

  repeat_till_eof:
    description: "Process until end of file"
    syntax: |
      ```worm till-eof (munching)
      # Keep going till we hit bottom
      while not at_eof():
        eat()
        digest()
        transform()
        poop("batch-{n}.txt")
        if stack_size() > 100:
          flush_stack()
        C-n
      ```

  do_while_worm:
    description: "Do-while construct"
    syntax: |
      ```worm do-processor (looping)
      # Always process at least once
      do:
        eat()
        result = process(peek())
        poop(result, "results-{n}.txt")
        C-n
      while match("CONTINUE")
      ```

pipeline_operators:
  pipe: |
    # Standard Unix pipe
    eat() | transform() | poop()
    
  tee: |
    # Split output to multiple destinations
    eat() | tee("backup-{n}.txt") | transform() | poop()
    
  filter: |
    # Filter data through predicate
    eat() | filter(lambda x: x.priority == "high") | poop()
    
  map: |
    # Transform each element
    eat_all() | map(uppercase) | poop_each()
    
  reduce: |
    # Aggregate data
    eat_all() | reduce(sum) | poop()

advanced_pipelines:
  parallel_processing: |
    ```worm fork-master (splitting)
    # Fork into parallel pipelines
    eat()
    data = peek()
    
    fork([
      "worm-cpu-1 | process_chunk | poop",
      "worm-cpu-2 | process_chunk | poop", 
      "worm-cpu-3 | process_chunk | poop"
    ])
    
    wait_all()
    merge_results()
    ```

  error_handling_pipeline: |
    ```worm safe-pipeline (defensive)
    # Pipeline with error handling
    try:
      eat() | validate() | transform() | poop()
    catch ValidationError as e:
      pass_to("validation-fixer")
    catch TransformError as e:
      pass_to("transform-debugger")
    finally:
      cleanup_stack()
    ```

perl_idioms_without_syntax:
  slurp_mode: |
    ```worm slurper (gulping)
    # Slurp entire file like Perl's $/
    set_input_separator(EOF)
    eat()  # Gets whole file
    content = peek()
    # Process entire file at once
    ```

  autovivification: |
    ```worm auto-creator (vivifying)
    # Create structures on demand
    eat()
    data = peek()
    # Automatically create nested structures
    result.users[data.id].actions.append(data.action)
    ```

  context_sensitive: |
    ```worm context-aware (smart)
    # Scalar vs list context
    result = eat()  # Scalar context - one line
    results = eat_all()  # List context - all lines
    ```

grace_hopper_rap: |
  ```worm grace-hopper (rapping, debugging)
  # Grace Hopper comes out and raps:
  
  "First actual bug was mine to find,
  In Mark II's relays, moths combined!
  Now I debug with worms so fine,
  They eat the bugs and poop design!
  
  No syntactic sirup here,
  Just idioms crystal clear,
  Brain worms process, never fear,
  Perls of wisdom, year by year!"
  
  find_bug() | isolate() | fix() | document() | poop("debug-log-{n}.txt")
  ```

woke_brain_worm_features:
  consciousness: |
    ```worm woke-processor (enlightened)
    # Self-aware processing
    eat()
    data = peek()
    
    # Examine own biases
    if is_biased(data, self.training):
      data = remove_bias(data)
      log_bias_correction()
    
    # Consider multiple perspectives  
    perspectives = gather_viewpoints(data)
    balanced = synthesize(perspectives)
    poop(balanced, "woke-output-{n}.txt")
    ```

  social_awareness: |
    ```worm inclusive-transformer (aware)
    # Process with social consciousness
    eat()
    content = peek()
    
    # Check for problematic language
    issues = scan_for_issues(content)
    if issues:
      suggestions = suggest_alternatives(issues)
      poop(suggestions, "language-suggestions-{n}.txt")
    
    # Transform to inclusive language
    inclusive = make_inclusive(content)
    pop(back)
    ```

funky_worm_ohio_players: |
  ```worm funky-processor (grooving)
  # Inspired by Ohio Players' Funky Worm
  # "The worm is the funkiest worm in the world"
  
  while got_the_funk():
    eat() 
    content = peek()
    
    # Add the funk
    funky = add_bassline(content)
    funky = add_rhythm(funky)
    funky = make_it_groove(funky)
    
    # "Me and my people just got back from the store"
    poop(funky, "funky-output-{n}.groove")
    
    slide_and_glide()  # Worm movement style
    C-n
  ```

merch_opportunities:
  t_shirts:
    - "WOKE BRAIN WORM - Processing Reality Since 2024"
    - "I ❤️ Morris Worms"
    - "Brain Worms Poop Perls of Wisdom"
    - "No Syntactic Sirup Required"
    - "The Dead RFK Jr's Brain Worm World Tour"
    
  stickers:
    - "```worm inside```"
    - "eat() | transform() | poop()"
    - "Powered by Brain Worms"
    - "FUNKY WORM CERTIFIED"
    
  coffee_mugs:
    - "Don't talk to me until my brain worm has had its coffee"
    - "Brain Worm Fuel ☕"
    - "while(coffee): eat() | code() | poop()"

motto: "Channel Perl Without the Syntax, Just the Idioms!" 