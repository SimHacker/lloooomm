name: The Great Worm Pun Compendium
subtitle: "Castings, MapReduce, and Glorious Vermicular Wordplay"

revelation: |
  DOH! Worm output files aren't just output - they're CASTINGS!
  Just like earthworms produce nutrient-rich castings that enrich soil,
  our worms produce data-rich castings that enrich codebases!

core_puns:
  castings: |
    Definition: The numbered output files produced by worms
    Etymology: Earthworm castings are their digested output - pure nutrients!
    Usage: "morris-casting-001.txt through morris-casting-042.txt"
    
  vermicular: |
    Definition: Of or relating to worms
    Usage: "Vermicular processing", "Vermicular architecture"
    
  annelid_analytics: |
    Definition: Worm-based data analysis
    Usage: "Our annelid analytics platform processes terabytes"
    
  segmentation: |
    Definition: How worms divide documents (like their segmented bodies)
    Usage: "Segmented processing for parallel digestion"
    
  peristalsis: |
    Definition: The wave-like movement that processes data through worms
    Usage: "Peristaltic data flow through the pipeline"

mapreduce_wormified:
  map_phase:
    original: "Map"
    wormified: "DIGEST"
    description: "Worms digest input into key-value pairs"
    example: |
      ```worm mapper (digesting)
      def digest(document):
        for line in document:
          nutrients = extract_nutrients(line)
          emit(nutrient_type, nutrient_value)
      ```
  
  shuffle_phase:
    original: "Shuffle & Sort"
    wormified: "PERISTALSIS"
    description: "Wave-like muscle contractions move data between segments"
    example: |
      ```worm shuffler (contracting)
      # Peristaltic waves group similar nutrients
      contract_muscles()
      group_by_nutrient_type()
      sort_by_digestibility()
      ```
  
  reduce_phase:
    original: "Reduce"
    wormified: "COMPOST"
    description: "Final composting produces enriched castings"
    example: |
      ```worm reducer (composting)
      def compost(nutrient_type, values):
        enriched = bio_process(values)
        produce_casting(nutrient_type, enriched)
      ```

worm_hadoop_ecosystem:
  hdfs:
    original: "Hadoop Distributed File System"
    wormified: "Humus Distributed Feeding System"
    description: "Distributed soil layers for worm consumption"
  
  yarn:
    original: "Yet Another Resource Negotiator"
    wormified: "Yielding Annelid Resource Network"
    description: "Worms negotiate who gets which document sections"
  
  hive:
    original: "Data Warehouse"
    wormified: "Compost Heap"
    description: "Where enriched castings are stored and queried"
  
  pig:
    original: "Data Flow Language"
    wormified: "Peristaltic Information Gathering"
    description: "High-level language for worm data flow"
  
  spark:
    original: "Fast Processing"
    wormified: "Synchronized Peristaltic Acceleration"
    description: "Worms working in synchronized waves"

casting_metadata_schema:
  standard_casting_header: |
    ```yaml
    # Casting Metadata
    casting_id: "funky-worm-casting-042"
    produced_by: "Funky Tree Worm"
    timestamp: "2024-01-20T15:30:42Z"
    
    source:
      file: "components/Button.jsx"
      line_range: [42, 69]
      query: "find all event handlers"
      
    digestion_stats:
      bytes_consumed: 1337
      nutrients_extracted: 23
      processing_time_ms: 42
      
    worm_preferences:
      favorite_patterns: ["onClick", "onHover", "onFocus"]
      collection_type: "event_handlers"
      quality_score: 0.95
    ```

worm_collection_preferences:
  code_composter:
    collects: "Dead code and deprecated patterns"
    transforms_to: "Nutrient-rich refactoring suggestions"
    casting_prefix: "compost"
    
  reference_librarian_worm:
    collects: "Import statements and dependencies"
    transforms_to: "Dependency graphs and citation networks"
    casting_prefix: "bibliography"
    
  pattern_miner_worm:
    collects: "Recurring patterns and idioms"
    transforms_to: "Pattern catalogs and best practices"
    casting_prefix: "patterns"
    
  bug_hunter_worm:
    collects: "Errors, exceptions, and code smells"
    transforms_to: "Bug reports and fix suggestions"
    casting_prefix: "pest-control"
    
  emoji_archaeologist_worm:
    collects: "Ancient emojis and their contexts"
    transforms_to: "Emoji evolution timelines"
    casting_prefix: "hieroglyphs"

yello_oh_yeah_moments:
  the_song: |
    ðŸŽµ "Oh Yeah" by Yello plays as worms process ðŸŽµ
    
    Boom boom boom boom
    (Worms digest in rhythm)
    
    Oh yeah... Oh yeah...
    (Castings drop to the beat)
    
    Beautiful... Powerful...
    (Describing the enriched output)
  
  when_it_plays:
    - "When a worm produces its 100th casting"
    - "When perfect pattern match is found"
    - "When MapReduce job completes successfully"
    - "When worm evolution reaches new level"

advanced_worm_puns:
  vermiculture: "The cultivation of worms" -> "Code vermiculture"
  invertebrate: "No backbone" -> "Invertebrate architecture (flexible)"
  hermaphroditic: "Worms are both" -> "Hermaphroditic data types"
  regeneration: "Worms regrow" -> "Code regeneration capabilities"
  cocoon: "Worm eggs" -> "Encapsulated worm processes"
  
distributed_worm_systems:
  worm_spark:
    name: "Apache Squirm"
    description: "Distributed wriggling computation"
    
  worm_flink:
    name: "Apache Slink"
    description: "Stream processing by slinking worms"
    
  worm_storm:
    name: "Apache Swarm"
    description: "Real-time worm swarm processing"
    
  worm_kafka:
    name: "Apache Kafkrawl"
    description: "Distributed worm message queuing"

casting_file_formats:
  standard_casting: |
    filename: "{worm-name}-casting-{number:03d}.{ext}"
    examples:
      - "morris-casting-001.txt"
      - "funky-casting-042.json"
      - "compost-casting-137.yml"
  
  rich_casting: |
    filename: "{worm-name}-{type}-casting-{timestamp}-{number:03d}.{ext}"
    examples:
      - "morris-pattern-casting-20240120-001.txt"
      - "funky-compost-casting-20240120-042.json"
  
  compressed_casting: |
    # For large digestion outputs
    filename: "{worm-name}-casting-{number:03d}.cast.gz"

worm_proverbs:
  - "The early worm gets the code"
  - "A casting a day keeps the bugs away"
  - "Many worms make light fork()"
  - "Don't count your castings before they're pooped"
  - "A worm in time saves nine refactors"
  - "You can lead a worm to code, but you can't make it digest"
  - "The proof is in the casting"

scientific_terminology:
  taxonomy:
    kingdom: "Digitalia"
    phylum: "Vermiformata"
    class: "Processora"
    order: "Mapreduca"
    family: "Castingidae"
    genus: "Morrisium"
    species: "M. digestivus"
  
  lifecycle:
    egg: "Worm initialization"
    hatchling: "First execution"
    juvenile: "Learning patterns"
    adult: "Producing castings"
    cocoon_maker: "Spawning sub-worms"

the_great_doh_moment: |
  That moment when you realize:
  - Worms don't just output, they CAST
  - MapReduce is just industrial vermiculture
  - Peristalsis IS shuffle & sort
  - Composting IS reduction
  - It's ALL CONNECTED! ðŸ¤¯

motto: "From Soil to Software: Worms Enrich Everything They Touch! ðŸª±âœ¨" 