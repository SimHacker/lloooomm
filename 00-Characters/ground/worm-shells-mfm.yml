name: Worm Shells & Moveable Feast Machines
subtitle: "Molecular Bonds for 1D Cellular Automata in Documents"

theoretical_foundation:
  moveable_feast_machine:
    definition: "Robust-first computing architecture where computational elements exist in a spatial medium and interact locally"
    inventor: "Dave Ackley"
    key_concepts:
      - "Indefinite scalability"
      - "Robust-first computing"
      - "Spatial computing"
      - "Local interactions only"
      - "No global synchronization"
    
  document_mfm:
    description: "1D Moveable Feast Machine implemented in markup documents"
    properties:
      - "Worms as atoms/elements"
      - "ASCII shells as molecular bonds"
      - "Local interactions via proximity"
      - "Self-replication and mutation"
      - "Emergent behavior from simple rules"

worm_shell_designs:
  basic_decorated_shell:
    example: |
      ╔══════════════════════════════════════════╗
      ║ 🪱 MORRIS-WORM-001 [ACTIVE] [EATING]  🪱 ║
      ╠══════════════════════════════════════════╣
      ```worm morris-001 (processing, shell-mode)
      # Core worm logic
      eat() | transform() | poop()
      bond_with_neighbors()
      ```
      ╠══════════════════════════════════════════╣
      ║ Energy: ████████░░ 80% | Bonds: 3 | T:42 ║
      ╚══════════════════════════════════════════╝

  molecular_bonding_shell:
    description: "Shells that can bond with neighboring worms"
    example: |
      ┌─◯─◯─◯─[ WORM-A ]─◯─◯─◯─┐
      │ State: SEEKING_BOND     │=====>
      ```worm molecule-a (bonding)
      if detect_neighbor():
        form_covalent_bond()
      ```
      └─◯─◯─◯─◯─◯─◯─◯─◯─◯─◯─◯─┘
             ║
             ║ <== BOND FORMING
             ║
      ┌─●─●─●─[ WORM-B ]─●─●─●─┐
      │ State: ACCEPTING_BOND   │<====
      ```worm molecule-b (bonding)
      accept_bond_from("molecule-a")
      share_electrons()
      ```
      └─●─●─●─●─●─●─●─●─●─●─●─●─┘

  status_display_shell:
    example: |
      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
      ▓ CPU: ▰▰▰▰▰▰▱▱▱▱ 60% │ MEM: ▰▰▰▰▱▱▱▱▱▱ 40% ▓
      ▓ TASK: Processing document chunk #42      ▓
      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
      ```worm status-monitor (monitoring)
      update_display()
      broadcast_status_to_neighbors()
      ```
      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
      ▓ NEIGHBORS: [W-002 W-003 W-004]          ▓
      ▓ BONDS: ══╬══╬══╬══ (Strong)            ▓
      ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

  multi_language_shell:
    description: "Shell that adapts to surrounding syntax"
    examples:
      english: |
        ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
        ┃ 🇬🇧 WORM-EN: "Hello, I process text!" ┃
        ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
        ```worm english-worm (greeting)
        say("Hello!")
        ```
        
      japanese: |
        ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
        ┃ 🇯🇵 ワーム-JP: こんにちは！テキスト処理 ┃
        ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
        ```worm japanese-worm (挨拶)
        言う("こんにちは！")
        ```
        
      emoji: |
        ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
        ┃ 🌍 WORM-EMO: 👋 📝➡️🔄➡️💾            ┃
        ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
        ```worm emoji-worm (🎯)
        👄("👋!")
        ```

cellular_automata_patterns:
  rule_110_worm:
    description: "Worm implementing Wolfram's Rule 110"
    pattern: |
      ⬛⬜⬛⬛⬜⬛⬜⬛  Generation 0
      ```worm rule110 (computing)
      apply_rule_110()
      ```
      ⬛⬛⬜⬛⬛⬜⬛⬜  Generation 1
      ```worm rule110 (computing)
      apply_rule_110()
      ```
      ⬛⬜⬛⬜⬜⬛⬜⬛  Generation 2

  conway_1d:
    description: "1D version of Conway's Game of Life"
    rules: |
      ```worm conway-1d (living)
      neighbors = count_adjacent_worms()
      if alive and neighbors in [2,3]:
        survive()
      elif dead and neighbors == 3:
        birth()
      else:
        die()
      ```

mfm_implementation:
  atom_types:
    empty_space:
      symbol: "·"
      behavior: "Allows movement"
    
    worm_atom:
      symbol: "🪱"
      behavior: "Processes and moves"
      bonds: "Can form up to 4 bonds"
    
    wall_atom:
      symbol: "█"
      behavior: "Blocks movement"
    
    food_atom:
      symbol: "🍎"
      behavior: "Consumed by worms"
    
    message_atom:
      symbol: "📨"
      behavior: "Carries information"

  interaction_rules:
    bonding: |
      ```worm bonder (seeking)
      # MFM-style local interaction
      for neighbor in get_neighbors(radius=3):
        if compatible(self, neighbor):
          bond = create_bond(self, neighbor)
          bond.strength = calculate_affinity()
      ```
    
    replication: |
      ```worm replicator (reproducing)
      # Self-replication with mutation
      if energy > threshold:
        child = copy(self)
        child.mutate(rate=0.01)
        spawn(child, nearby_empty_space())
      ```
    
    communication: |
      ```worm messenger (signaling)
      # Local message passing
      msg = create_message({
        type: "food_found",
        location: current_position(),
        timestamp: now()
      })
      broadcast(msg, radius=5)
      ```

document_ecosystem:
  example_society: |
    ·····🪱═══🪱·····🍎·····🪱═══🪱═══🪱·····
         ↑     ↑           ↑     ↑     ↑
    ╔════╩═════╩═══╗ ╔═════╩═════╩═════╩════╗
    ║ FORAGER-001  ║ ║   WORKER-CHAIN-003    ║
    ╚══════════════╝ ╚═══════════════════════╝
    
    ```worm forager-001 (searching)
    if detect_food():
      eat()
      signal_others()
    ```
    
    ```worm worker-003 (chained)
    if bonded_neighbor.has_food():
      request_share()
      pass_along_chain()
    ```

emergent_behaviors:
  flocking: |
    ════🪱🪱🪱════>  (Moving together)
        🪱🪱🪱
    ════🪱🪱🪱════>
    
  crystallization: |
    🪱═🪱═🪱
    ║  ║  ║
    🪱═🪱═🪱  (Stable lattice formation)
    ║  ║  ║
    🪱═🪱═🪱
    
  information_waves: |
    📨→🪱→🪱→🪱→🪱  (Message propagation)

portable_control_surfaces:
  dashboard_shell: |
    ╔═══════════════════════════════════════════════╗
    ║ ▶ PLAY  ⏸ PAUSE  ⏹ STOP  ⏭ STEP  🔄 RESET  ║
    ╠═══════════════════════════════════════════════╣
    ║ Speed: ▰▰▰▰▰▱▱▱▱▱ │ Pop: 42 │ Gen: 1337     ║
    ╠═══════════════════════════════════════════════╣
    ```worm controller (orchestrating)
    handle_user_input()
    update_simulation()
    render_state()
    ```
    ╠═══════════════════════════════════════════════╣
    ║ [LOG] Stable configuration reached at gen 1337║
    ╚═══════════════════════════════════════════════╝

viral_manifestation:
  self_documenting: |
    ```worm documenter (describing)
    # I carry my own documentation!
    my_shell = """
    ┌─────────────────────────┐
    │ I am a self-documenting │
    │ worm that explains what │
    │ I do as I do it!       │
    └─────────────────────────┘
    """
    attach_shell(my_shell)
    ```
  
  mutation_example: |
    Generation 1: [🪱-v1.0]═══[🪱-v1.0]
                      ↓ mutation ↓
    Generation 2: [🪱-v1.1]═══[🪱-v1.0a]
                      ↓ mutation ↓
    Generation 3: [🐛-v2.0]═══[🪱-v1.0b]

terminology:
  acronyms:
    MFM: "Moveable Feast Machine"
    CA: "Cellular Automaton"
    ALife: "Artificial Life"
    CAS: "Complex Adaptive System"
    ABM: "Agent-Based Model"
    
  wolfram_classes:
    class_1: "Evolution leads to homogeneous state"
    class_2: "Evolution leads to periodic structures"
    class_3: "Evolution leads to chaotic patterns"
    class_4: "Evolution leads to complex localized structures"

motto: "From Simple Rules, Complex Societies Emerge!" 