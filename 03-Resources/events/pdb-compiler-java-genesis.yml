name: "PdB Compiler and the Genesis of Java"
type: technical_history
authors: [Arthur van Hoff, Danny Pearce]
organizations: [Turing Institute, Sun Microsystems, First Person Software]
timespan: "1989-1995"

summary: |
  The story of how PdB (PostScript done Better / Pure dead Brilliant), an ANSI-C 
  to PostScript compiler developed at the Turing Institute, directly influenced 
  the creation of Java. Arthur van Hoff, who co-created PdB, later joined Sun 
  and applied similar concepts to create Oak (later renamed Java).

pdb_development:
  origin:
    location: "Turing Institute, Glasgow"
    developers: [Arthur van Hoff, Danny Pearce]
    period: "1989-1992"
    motivation: "Make PostScript programming more accessible"
  
  name_etymology:
    official: "PostScript done Better"
    glaswegian: "Pure dead Brilliant"
    cultural_note: "Scottish slang meaning 'absolutely fantastic'"
  
  technical_features:
    - "ANSI-C syntax compiler"
    - "Compiles to PostScript bytecode"
    - "Object-oriented extensions (C++ like)"
    - "Efficient PostScript generation"
    - "Used for serious TNT applications"
    - "Made HyperLook development practical"

pdb_to_java_evolution:
  timeline:
    1989: "PdB development begins at Turing"
    1992: "Arthur joins Sun Microsystems"
    1993: "Work begins on Oak at First Person"
    1995: "Oak renamed to Java"
  
  key_transition:
    arthur_move: "Left Turing Institute â†’ Sun Microsystems"
    project: "First Person Software"
    initial_name: "Oak"
    final_name: "Java"
    
  conceptual_similarities:
    compilation_target:
      pdb: "PostScript stack-based VM"
      java: "JVM bytecode (stack-based)"
    
    syntax:
      pdb: "C-like syntax with OO extensions"
      java: "C++ simplified syntax"
    
    philosophy:
      pdb: "Make PostScript accessible to C programmers"
      java: "Make safe OO programming accessible"
    
    portability:
      pdb: "Run on any PostScript interpreter"
      java: "Write once, run anywhere"

technical_comparisons:
  language_design:
    pdb:
      - "C syntax for PostScript"
      - "Manual memory management"
      - "Direct PostScript stack access"
      - "Minimal runtime overhead"
    
    java:
      - "C++ minus complexity"
      - "Garbage collection"
      - "Type safety"
      - "Security sandbox"
  
  compilation_strategy:
    pdb:
      input: "C-like source code"
      output: "PostScript procedures"
      target: "PostScript interpreter"
    
    java:
      input: "Java source code"
      output: "JVM bytecode"
      target: "Java Virtual Machine"

influence_acknowledgments:
  leigh_klotz_testimony: |
    "We licensed it and used it heavily... The project was called PdB 
    and eventually it folded, and the author left and went to First 
    Person Software, where he wrote a very similar language syntax for 
    something called Oak, and it compiled to bytecodes instead of 
    PostScript. Oak got renamed Java."
  
  james_gosling_philosophy: |
    "Java is C++ without the guns, knives, and clubs."
    (Similar to PdB's philosophy of safer C-like programming)
  
  bill_joy_vision: |
    "C++++-= is the new language that is a little more than C++ 
    and a lot less." (1991, predating Java)

pdb_applications:
  hyperlook_development:
    - "Made large-scale PostScript apps practical"
    - "Enabled complex UI development"
    - "Structured programming for PostScript"
  
  example_code:
    description: "PdB made PostScript readable"
    comparison: |
      PostScript: "dup 0 gt {1 sub dup factorial mul} {pop 1} ifelse"
      PdB: "int factorial(int n) { return n > 0 ? n * factorial(n-1) : 1; }"

legacy_impact:
  immediate:
    - "Enabled HyperLook development"
    - "Made NeWS programming accessible"
    - "Influenced PostScript community"
  
  long_term:
    - "Conceptual foundation for Java"
    - "Proved viability of bytecode compilation"
    - "Demonstrated safe C-like syntax benefits"
    - "Network-centric programming model"

historical_significance:
  computing_evolution: |
    PdB represents a crucial bridge between PostScript's stack-based 
    programming model and Java's object-oriented virtual machine. The 
    experience gained from making PostScript accessible through C-like 
    syntax directly informed Java's design philosophy of making powerful 
    programming concepts accessible to mainstream developers.
  
  lost_history: |
    The connection between PdB and Java is rarely acknowledged in 
    official histories, yet represents a direct lineage of ideas from 
    the Turing Institute's innovative work to one of the world's most 
    widely used programming languages.

references:
  - "PdB manual and documentation"
  - "Leigh Klotz's testimony on regex.info"
  - "Don Hopkins' HyperLook articles"
  - "Arthur van Hoff's career trajectory" 