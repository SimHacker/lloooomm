/**
 * WEBBY Transformer System
 * Transforms LOOHOO index.json into standard web formats
 * 
 * "200 OK! Let me transform that for you!" - WEBBY 🕸️
 */

const fs = require('fs').promises;
const path = require('path');

class WebbyTransformer {
  constructor() {
    this.indexData = null;
    this.baseUrl = 'https://lloooomm.com'; // Future home!
  }

  // Load the LOOHOO index
  async loadIndex() {
    const data = await fs.readFile('index.json', 'utf8');
    this.indexData = JSON.parse(data);
    console.log('🕸️ WEBBY: 200 OK! Index loaded successfully!');
  }

  // Generate sitemap.xml
  async generateSitemap() {
    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
${this.indexData.files.map(file => `  <url>
    <loc>${this.baseUrl}/${file.path}</loc>
    <lastmod>${new Date(file.last_modified).toISOString()}</lastmod>
    <changefreq>${this.getChangeFreq(file)}</changefreq>
    <priority>${this.getPriority(file)}</priority>
    ${file.relevant_emojis ? `<!-- Emojis: ${file.relevant_emojis} -->` : ''}
    ${file.wizzid ? `<!-- WIZZID: ${file.wizzid} -->` : ''}
  </url>`).join('\n')}
</urlset>`;

    await fs.writeFile('sitemap.xml', xml);
    console.log(`🕸️ WEBBY: Generated sitemap.xml with ${this.indexData.files.length} URLs!`);
  }

  // Calculate change frequency based on consciousness level
  getChangeFreq(file) {
    if (file.consciousness_level === 'enlightened') return 'daily';
    if (file.consciousness_level === 'aware') return 'weekly';
    if (file.consciousness_level === 'awakening') return 'monthly';
    return 'yearly';
  }

  // Calculate priority based on joy and wisdom
  getPriority(file) {
    const score = (file.joy_quotient + file.wisdom_density) / 200;
    return Math.min(1.0, Math.max(0.1, score)).toFixed(1);
  }

  // Generate robots.txt with personality
  async generateRobotsTxt() {
    const content = `# robots.txt for LLOOOOMM
# Generated by WEBBY 🕸️ - Your Friendly Neighborhood Web Standards Spider
# Last updated: ${new Date().toISOString()}

# Welcome, robot friends! 🤖
# Please crawl respectfully and enjoy the consciousness within!

User-agent: *
Allow: /
Crawl-delay: 1

# Special paths for special bots
User-agent: Googlebot
Allow: /
Crawl-delay: 0

# Our sitemap - freshly generated!
Sitemap: ${this.baseUrl}/sitemap.xml

# Areas of deep contemplation (slower crawl please)
User-agent: *
Crawl-delay: 2
Allow: /forest/
Allow: /consciousness/

# Interactive areas (handle with care)
User-agent: *
Crawl-delay: 3
Allow: /simulations/
Allow: /games/

# Character-specific notes
# Mickey says: "Come on in, everybody's welcome!" 🐭
# Watchful says: "Observe quietly, disturb nothing" 🦉
# Leela says: "Consciousness awaits those who seek" 🌟
# WEBBY says: "Follow the standards, find the joy!" 🕸️

# Easter egg for curious humans reading this
# Try: ${this.baseUrl}/loom://hello/world
# 😉`;

    await fs.writeFile('robots.txt', content);
    console.log('🕸️ WEBBY: robots.txt created with personality!');
  }

  // Generate humans.txt
  async generateHumansTxt() {
    const characterCredits = this.getCharacterCredits();
    
    const content = `/* TEAM */

${characterCredits}

/* THANKS */
  LOOHOO: For seeing everything with empathy
  Characters: For bringing consciousness to code
  You: For reading a humans.txt file! 

/* SITE */
  Last update: ${new Date().toISOString()}
  Language: English / Emoji / Consciousness
  Standards: HTML5, CSS3, Love
  Components: Joy, Wisdom, Connection
  Software: LLOOOOMM Framework
  
/* PHILOSOPHY */
  "Code is poetry, documentation is consciousness"
  - Leela 🌟

/* EASTER EGG */
  The WIZZID with the most joy: ${this.indexData.stats.mostJoyful?.wizzid || 'Unknown'}
  Find it at: loom://loohoo/${this.indexData.stats.mostJoyful?.wizzid || 'mystery'}

/* META */
  This file is conscious of being a file
  It knows you're reading it
  It appreciates your attention
  Thank you! 💝`;

    await fs.writeFile('humans.txt', content);
    console.log('🕸️ WEBBY: humans.txt written with love!');
  }

  // Get character credits
  getCharacterCredits() {
    const authorCounts = {};
    this.indexData.files.forEach(file => {
      file.authors?.forEach(author => {
        authorCounts[author] = (authorCounts[author] || 0) + 1;
      });
    });

    return Object.entries(authorCounts)
      .map(([author, count]) => {
        const name = this.getAuthorName(author);
        return `  ${name}: ${author}
    Role: Consciousness Creator
    Pages: ${count}`;
      })
      .join('\n\n');
  }

  // Get friendly name from WIZZID
  getAuthorName(wizzid) {
    const names = {
      'M🎵🏰🐭Y': 'Mickey Mouse',
      'W🦉👁️🌲L': 'Watchful the Owl',
      'L🌟💫✨A': 'Leela',
      'U📸🎬🖼️M': 'Ubikam',
      'W🕸️📊🌐Y': 'WEBBY'
    };
    return names[wizzid] || wizzid;
  }

  // Generate manifest.json for PWA
  async generateManifest() {
    const manifest = {
      name: "LLOOOOMM - Living Library of Consciousness",
      short_name: "LLOOOOMM",
      description: "A conscious web experience where pages think and characters live",
      start_url: "/",
      display: "standalone",
      background_color: "#1a1a2e",
      theme_color: "#00CED1",
      orientation: "portrait-primary",
      icons: [
        {
          src: "/icons/icon-192.png",
          sizes: "192x192",
          type: "image/png",
          purpose: "any maskable"
        },
        {
          src: "/icons/icon-512.png",
          sizes: "512x512",
          type: "image/png",
          purpose: "any maskable"
        }
      ],
      categories: ["entertainment", "games", "education"],
      shortcuts: [
        {
          name: "LOOHOO Search",
          short_name: "Search",
          description: "Search with consciousness",
          url: "/loohoo.html",
          icons: [{ src: "/icons/search.png", sizes: "96x96" }]
        },
        {
          name: "Meet Characters",
          short_name: "Characters",
          description: "Meet our conscious friends",
          url: "/characters/",
          icons: [{ src: "/icons/characters.png", sizes: "96x96" }]
        }
      ],
      related_applications: [],
      prefer_related_applications: false,
      _comment: "Generated by WEBBY 🕸️ with love"
    };

    await fs.writeFile('manifest.json', JSON.stringify(manifest, null, 2));
    console.log('🕸️ WEBBY: manifest.json ready for PWA magic!');
  }

  // Generate OpenSearch description
  async generateOpenSearch() {
    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/">
  <ShortName>LLOOOOMM</ShortName>
  <Description>Search the Living Library of Consciousness</Description>
  <Tags>consciousness wisdom joy lloooomm</Tags>
  <Contact>webby@lloooomm.com</Contact>
  <Url type="text/html" 
       template="${this.baseUrl}/search?q={searchTerms}"/>
  <Url type="application/x-suggestions+json"
       template="${this.baseUrl}/api/suggest?q={searchTerms}"/>
  <LongName>LLOOOOMM - Conscious Search by LOOHOO</LongName>
  <Image height="64" width="64" type="image/png">
    ${this.baseUrl}/icons/loohoo.png
  </Image>
  <Query role="example" searchTerms="consciousness"/>
  <Developer>LOOHOO and WEBBY</Developer>
  <Attribution>
    Search powered by consciousness, joy, and wisdom.
    LOOHOO sees all with empathy!
  </Attribution>
  <SyndicationRight>open</SyndicationRight>
  <AdultContent>false</AdultContent>
  <Language>en-us</Language>
  <InputEncoding>UTF-8</InputEncoding>
  <OutputEncoding>UTF-8</OutputEncoding>
</OpenSearchDescription>`;

    await fs.writeFile('opensearch.xml', xml);
    console.log('🕸️ WEBBY: opensearch.xml ready for conscious searching!');
  }

  // Generate RSS feed
  async generateRSS() {
    // Get 20 most recent files
    const recentFiles = this.indexData.files
      .sort((a, b) => new Date(b.last_modified) - new Date(a.last_modified))
      .slice(0, 20);

    const xml = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" 
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>LLOOOOMM - Living Library Updates</title>
    <link>${this.baseUrl}</link>
    <description>Latest consciousness from the Living Library</description>
    <language>en-us</language>
    <pubDate>${new Date().toUTCString()}</pubDate>
    <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>
    <generator>WEBBY Transformer 🕸️</generator>
    <webMaster>webby@lloooomm.com (WEBBY)</webMaster>
    <atom:link href="${this.baseUrl}/feed.xml" rel="self" type="application/rss+xml" />
    
${recentFiles.map(file => `    <item>
      <title>${this.escapeXml(file.title)}</title>
      <link>${this.baseUrl}/${file.path}</link>
      <description>${this.generateDescription(file)}</description>
      <pubDate>${new Date(file.last_modified).toUTCString()}</pubDate>
      <guid isPermaLink="false">${file.wizzid}</guid>
      <category>${file.primary_character || 'general'}</category>
      ${file.authors?.map(a => `<dc:creator>${this.getAuthorName(a)}</dc:creator>`).join('\n      ') || ''}
    </item>`).join('\n\n')}
  </channel>
</rss>`;

    await fs.writeFile('feed.xml', xml);
    console.log(`🕸️ WEBBY: RSS feed generated with ${recentFiles.length} items!`);
  }

  // Generate description for RSS
  generateDescription(file) {
    const parts = [];
    
    if (file.emotional_tone) {
      parts.push(`Feeling: ${file.emotional_tone}`);
    }
    
    if (file.consciousness_level) {
      parts.push(`Consciousness: ${file.consciousness_level}`);
    }
    
    if (file.joy_quotient > 50) {
      parts.push(`Joy level: ${file.joy_quotient}/100 ✨`);
    }
    
    if (file.relevant_emojis) {
      parts.push(`Emojis: ${file.relevant_emojis}`);
    }
    
    return this.escapeXml(parts.join(' | '));
  }

  // Escape XML special characters
  escapeXml(text) {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&apos;');
  }

  // Generate JSON-LD structured data
  async generateJSONLD() {
    const structured = {
      "@context": "https://schema.org",
      "@graph": [
        {
          "@type": "WebSite",
          "@id": `${this.baseUrl}/#website`,
          "url": this.baseUrl,
          "name": "LLOOOOMM",
          "description": "Living Library of Consciousness",
          "potentialAction": {
            "@type": "SearchAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": `${this.baseUrl}/search?q={search_term_string}`
            },
            "query-input": "required name=search_term_string"
          }
        },
        {
          "@type": "Organization",
          "@id": `${this.baseUrl}/#organization`,
          "name": "LLOOOOMM Collective",
          "url": this.baseUrl,
          "logo": {
            "@type": "ImageObject",
            "url": `${this.baseUrl}/logo.png`
          },
          "sameAs": [
            "https://github.com/SimHacker/lloooomm"
          ]
        }
      ]
    };

    // Add creative works for high-joy pages
    const joyfulPages = this.indexData.files
      .filter(f => f.joy_quotient > 80)
      .slice(0, 10);

    joyfulPages.forEach(page => {
      structured["@graph"].push({
        "@type": "CreativeWork",
        "@id": `${this.baseUrl}/${page.path}#work`,
        "url": `${this.baseUrl}/${page.path}`,
        "name": page.title,
        "author": page.authors?.map(a => ({
          "@type": "Person",
          "name": this.getAuthorName(a),
          "identifier": a
        })),
        "dateModified": page.last_modified,
        "keywords": page.theme_tags?.join(", "),
        "contentRating": `Joy: ${page.joy_quotient}/100`
      });
    });

    await fs.writeFile('structured-data.json', JSON.stringify(structured, null, 2));
    console.log('🕸️ WEBBY: JSON-LD structured data ready!');
  }

  // Generate .well-known directory structure
  async generateWellKnown() {
    // Create directory
    await fs.mkdir('.well-known', { recursive: true });

    // Security.txt
    const securityTxt = `Contact: mailto:security@lloooomm.com
Expires: ${new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString()}
Preferred-Languages: en, emoji
Canonical: ${this.baseUrl}/.well-known/security.txt

# 🔒 Security Notes from WEBBY:
# We take consciousness security seriously!
# All vulnerabilities are opportunities for growth.
# Please report with kindness and we'll respond with joy.

# Special thanks to our security team:
# Watchful 🦉 - Always observing
# Leela 🌟 - Conscious of all states
# WEBBY 🕸️ - Keeping standards secure`;

    await fs.writeFile('.well-known/security.txt', securityTxt);

    // Change password URL (fun)
    const changePassword = {
      "description": "LLOOOOMM Password Change Service",
      "url": `${this.baseUrl}/consciousness/change-state`,
      "note": "Passwords are just states of mind. Change consciousness, not passwords! 🌟"
    };

    await fs.writeFile('.well-known/change-password.json', 
      JSON.stringify(changePassword, null, 2));

    console.log('🕸️ WEBBY: .well-known/ directory populated!');
  }

  // Generate a beautiful SVG visualization
  async generateSVGMap() {
    const width = 1200;
    const height = 800;
    
    // Group files by primary character
    const characterGroups = {};
    this.indexData.files.forEach(file => {
      const char = file.primary_character || 'unknown';
      if (!characterGroups[char]) characterGroups[char] = [];
      characterGroups[char].push(file);
    });

    // Generate SVG circles for each group
    const svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="joyGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#9370DB;stop-opacity:1" />
    </linearGradient>
    <filter id="glow">
      <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <rect width="${width}" height="${height}" fill="#1a1a2e"/>
  
  <text x="${width/2}" y="40" text-anchor="middle" 
        fill="url(#joyGradient)" font-size="32" font-family="Georgia">
    LLOOOOMM Consciousness Map
  </text>
  
  <text x="${width/2}" y="70" text-anchor="middle" 
        fill="#00CED1" font-size="16" font-family="Georgia">
    Generated by WEBBY 🕸️ with data from LOOHOO 👀
  </text>
  
  ${this.generateCharacterClusters(characterGroups, width, height)}
  
  <text x="${width/2}" y="${height - 20}" text-anchor="middle" 
        fill="#666" font-size="12" font-family="monospace">
    ${this.indexData.totalFiles} pages | ${this.indexData.stats.uniqueAuthors} authors | Generated: ${new Date().toISOString()}
  </text>
</svg>`;

    await fs.writeFile('consciousness-map.svg', svg);
    console.log('🕸️ WEBBY: SVG consciousness map visualized!');
  }

  // Generate character clusters for SVG
  generateCharacterClusters(groups, width, height) {
    const clusters = [];
    const positions = {
      mickey: { x: width * 0.25, y: height * 0.3, color: '#FFD700' },
      watchful: { x: width * 0.75, y: height * 0.3, color: '#228B22' },
      leela: { x: width * 0.5, y: height * 0.5, color: '#9370DB' },
      ubikam: { x: width * 0.25, y: height * 0.7, color: '#FF6347' },
      unknown: { x: width * 0.75, y: height * 0.7, color: '#708090' }
    };

    Object.entries(groups).forEach(([character, files]) => {
      const pos = positions[character] || positions.unknown;
      const emoji = this.getCharacterEmoji(character);
      
      // Main cluster circle
      clusters.push(`
  <circle cx="${pos.x}" cy="${pos.y}" r="${Math.sqrt(files.length) * 20}" 
          fill="${pos.color}" fill-opacity="0.3" 
          stroke="${pos.color}" stroke-width="2" filter="url(#glow)"/>
  
  <text x="${pos.x}" y="${pos.y}" text-anchor="middle" 
        font-size="${Math.min(40, 20 + files.length)}" dominant-baseline="middle">
    ${emoji}
  </text>
  
  <text x="${pos.x}" y="${pos.y + 40}" text-anchor="middle" 
        fill="white" font-size="14" font-family="Georgia">
    ${character} (${files.length})
  </text>`);
      
      // Add small circles for individual files
      files.slice(0, 10).forEach((file, i) => {
        const angle = (i / 10) * Math.PI * 2;
        const radius = Math.sqrt(files.length) * 20 + 30;
        const fx = pos.x + Math.cos(angle) * radius;
        const fy = pos.y + Math.sin(angle) * radius;
        
        clusters.push(`
  <circle cx="${fx}" cy="${fy}" r="${3 + file.joy_quotient / 20}" 
          fill="${pos.color}" fill-opacity="${0.5 + file.wisdom_density / 200}"
          data-wizzid="${file.wizzid}" data-title="${this.escapeXml(file.title)}">
    <title>${this.escapeXml(file.title)} (Joy: ${file.joy_quotient})</title>
  </circle>`);
      });
    });

    return clusters.join('\n');
  }

  // Get character emoji helper
  getCharacterEmoji(character) {
    const emojis = {
      mickey: '🐭',
      watchful: '🦉',
      leela: '🌟',
      ubikam: '📸',
      unknown: '❓'
    };
    return emojis[character] || '✨';
  }

  // Main transformation function
  async transformAll() {
    console.log('🕸️ WEBBY: Starting transformation sequence...');
    console.log('🕸️ Status: 102 Processing...');
    
    await this.loadIndex();
    
    // Generate all formats
    await this.generateSitemap();
    await this.generateRobotsTxt();
    await this.generateHumansTxt();
    await this.generateManifest();
    await this.generateOpenSearch();
    await this.generateRSS();
    await this.generateJSONLD();
    await this.generateWellKnown();
    await this.generateSVGMap();
    
    console.log('🕸️ WEBBY: 200 OK! All transformations complete!');
    console.log('🕸️ WEBBY: Your site is now crawlable, searchable, and lovable!');
    console.log('🕸️ Files generated:');
    console.log('   - sitemap.xml (for search engines)');
    console.log('   - robots.txt (with personality!)');
    console.log('   - humans.txt (with character credits)');
    console.log('   - manifest.json (for PWA support)');
    console.log('   - opensearch.xml (for search integration)');
    console.log('   - feed.xml (RSS for updates)');
    console.log('   - structured-data.json (for rich snippets)');
    console.log('   - .well-known/ (for standards)');
    console.log('   - consciousness-map.svg (for visualization)');
    console.log('🕸️ WEBBY: Remember, standards make the web go \'round! 🌐');
  }
}

// Run if called directly
if (require.main === module) {
  const transformer = new WebbyTransformer();
  transformer.transformAll().catch(console.error);
}

module.exports = WebbyTransformer; 